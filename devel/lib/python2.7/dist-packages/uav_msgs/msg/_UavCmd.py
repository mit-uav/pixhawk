"""autogenerated by genpy from uav_msgs/UavCmd.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class UavCmd(genpy.Message):
  _md5sum = "2ebbf27003b3d53a4bff293f972b61fa"
  _type = "uav_msgs/UavCmd"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# UavCmd.msg
# Message describing single UAV command

# Timestamp when issued
time timestamp

# Cmd type
int32 type
int32 LAND = 0
int32 POS_TARGET = 1
int32 HOVER = 2
int32 DEPLOY_MAGNET = 3


# Additional information
float64 pos_x
float64 pos_y
float64 pos_z

# Coefficient describing how quickly or how carefully to move: proportion of maximum haste [0,1]
float64 haste

"""
  # Pseudo-constants
  LAND = 0
  POS_TARGET = 1
  HOVER = 2
  DEPLOY_MAGNET = 3

  __slots__ = ['timestamp','type','pos_x','pos_y','pos_z','haste']
  _slot_types = ['time','int32','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       timestamp,type,pos_x,pos_y,pos_z,haste

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(UavCmd, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.timestamp is None:
        self.timestamp = genpy.Time()
      if self.type is None:
        self.type = 0
      if self.pos_x is None:
        self.pos_x = 0.
      if self.pos_y is None:
        self.pos_y = 0.
      if self.pos_z is None:
        self.pos_z = 0.
      if self.haste is None:
        self.haste = 0.
    else:
      self.timestamp = genpy.Time()
      self.type = 0
      self.pos_x = 0.
      self.pos_y = 0.
      self.pos_z = 0.
      self.haste = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2Ii4d.pack(_x.timestamp.secs, _x.timestamp.nsecs, _x.type, _x.pos_x, _x.pos_y, _x.pos_z, _x.haste))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.timestamp is None:
        self.timestamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 44
      (_x.timestamp.secs, _x.timestamp.nsecs, _x.type, _x.pos_x, _x.pos_y, _x.pos_z, _x.haste,) = _struct_2Ii4d.unpack(str[start:end])
      self.timestamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2Ii4d.pack(_x.timestamp.secs, _x.timestamp.nsecs, _x.type, _x.pos_x, _x.pos_y, _x.pos_z, _x.haste))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.timestamp is None:
        self.timestamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 44
      (_x.timestamp.secs, _x.timestamp.nsecs, _x.type, _x.pos_x, _x.pos_y, _x.pos_z, _x.haste,) = _struct_2Ii4d.unpack(str[start:end])
      self.timestamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2Ii4d = struct.Struct("<2Ii4d")
