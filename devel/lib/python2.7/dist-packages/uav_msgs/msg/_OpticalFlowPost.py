"""autogenerated by genpy from uav_msgs/OpticalFlowPost.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class OpticalFlowPost(genpy.Message):
  _md5sum = "d7693ea6e50aea50c4aac7307bf7713e"
  _type = "uav_msgs/OpticalFlowPost"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# OpticalFlowPost.msg
# Post-processed optical flow measurement

# Timestamp of measurement
time timestamp

# Quality
# scalar measure of flow quality [0,255]
# 255 => best quality
int32 quality

# Uncertainty
# scalar measure of uncertainty in range [0,1]
# 0 is most certain, 1 is least certain
# calculated from quality
float64 uncertainty

# Velocities
float64 x_vel
float64 y_vel

"""
  __slots__ = ['timestamp','quality','uncertainty','x_vel','y_vel']
  _slot_types = ['time','int32','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       timestamp,quality,uncertainty,x_vel,y_vel

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(OpticalFlowPost, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.timestamp is None:
        self.timestamp = genpy.Time()
      if self.quality is None:
        self.quality = 0
      if self.uncertainty is None:
        self.uncertainty = 0.
      if self.x_vel is None:
        self.x_vel = 0.
      if self.y_vel is None:
        self.y_vel = 0.
    else:
      self.timestamp = genpy.Time()
      self.quality = 0
      self.uncertainty = 0.
      self.x_vel = 0.
      self.y_vel = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2Ii3d.pack(_x.timestamp.secs, _x.timestamp.nsecs, _x.quality, _x.uncertainty, _x.x_vel, _x.y_vel))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.timestamp is None:
        self.timestamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 36
      (_x.timestamp.secs, _x.timestamp.nsecs, _x.quality, _x.uncertainty, _x.x_vel, _x.y_vel,) = _struct_2Ii3d.unpack(str[start:end])
      self.timestamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2Ii3d.pack(_x.timestamp.secs, _x.timestamp.nsecs, _x.quality, _x.uncertainty, _x.x_vel, _x.y_vel))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.timestamp is None:
        self.timestamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 36
      (_x.timestamp.secs, _x.timestamp.nsecs, _x.quality, _x.uncertainty, _x.x_vel, _x.y_vel,) = _struct_2Ii3d.unpack(str[start:end])
      self.timestamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2Ii3d = struct.Struct("<2Ii3d")
