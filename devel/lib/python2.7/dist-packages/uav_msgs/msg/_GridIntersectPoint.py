"""autogenerated by genpy from uav_msgs/GridIntersectPoint.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GridIntersectPoint(genpy.Message):
  _md5sum = "21038838cb74ecc324a132ea4bb92679"
  _type = "uav_msgs/GridIntersectPoint"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# GridIntersectPoint.msg
# Describes observed grid intersection point
# Produced by computer vision

# Corner -- identifies if this point is a corner
int32 corner
int32 NONE=0
int32 TOP_LEFT=1
int32 TOP_RIGHT=2
int32 BOTTOM_LEFT=3
int32 BOTTOM_RIGHT=4

# Position in UAV-centered body frame
float64 x
float64 y

"""
  # Pseudo-constants
  NONE = 0
  TOP_LEFT = 1
  TOP_RIGHT = 2
  BOTTOM_LEFT = 3
  BOTTOM_RIGHT = 4

  __slots__ = ['corner','x','y']
  _slot_types = ['int32','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       corner,x,y

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GridIntersectPoint, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.corner is None:
        self.corner = 0
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
    else:
      self.corner = 0
      self.x = 0.
      self.y = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_i2d.pack(_x.corner, _x.x, _x.y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 20
      (_x.corner, _x.x, _x.y,) = _struct_i2d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_i2d.pack(_x.corner, _x.x, _x.y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 20
      (_x.corner, _x.x, _x.y,) = _struct_i2d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_i2d = struct.Struct("<i2d")
