"""autogenerated by genpy from uav_msgs/EstUavState.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class EstUavState(genpy.Message):
  _md5sum = "884afb55d3979e06b05814ad6674c8fe"
  _type = "uav_msgs/EstUavState"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# UavEstState.msg
# Message describing estimated current state of the UAV

# Timestamp of state estimate
time timestamp

# State vector and covariance
float64[] state
float64[] covariance

# State field definitions
int32 IDX_ROLL 		= 0
int32 IDX_PITCH 	= 1
int32 IDX_YAW 		= 2
int32 IDX_VEL_U 	= 3
int32 IDX_VEL_V 	= 4
int32 IDX_VEL_W 	= 5
int32 IDX_THRUST	= 6
int32 IDX_POS_X		= 7
int32 IDX_POS_Y		= 8
int32 IDX_POS_Z		= 9
int32 IDX_DRAG_COEFF	= 10

"""
  # Pseudo-constants
  IDX_ROLL = 0
  IDX_PITCH = 1
  IDX_YAW = 2
  IDX_VEL_U = 3
  IDX_VEL_V = 4
  IDX_VEL_W = 5
  IDX_THRUST = 6
  IDX_POS_X = 7
  IDX_POS_Y = 8
  IDX_POS_Z = 9
  IDX_DRAG_COEFF = 10

  __slots__ = ['timestamp','state','covariance']
  _slot_types = ['time','float64[]','float64[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       timestamp,state,covariance

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(EstUavState, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.timestamp is None:
        self.timestamp = genpy.Time()
      if self.state is None:
        self.state = []
      if self.covariance is None:
        self.covariance = []
    else:
      self.timestamp = genpy.Time()
      self.state = []
      self.covariance = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2I.pack(_x.timestamp.secs, _x.timestamp.nsecs))
      length = len(self.state)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.state))
      length = len(self.covariance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.covariance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.timestamp is None:
        self.timestamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.timestamp.secs, _x.timestamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.state = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.covariance = struct.unpack(pattern, str[start:end])
      self.timestamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2I.pack(_x.timestamp.secs, _x.timestamp.nsecs))
      length = len(self.state)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.state.tostring())
      length = len(self.covariance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.covariance.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.timestamp is None:
        self.timestamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.timestamp.secs, _x.timestamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.state = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      self.timestamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2I = struct.Struct("<2I")
