"""autogenerated by genpy from uav_msgs/OpticalFlowRad.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class OpticalFlowRad(genpy.Message):
  _md5sum = "3a588d39eb1ee1fc1235949376ff1c66"
  _type = "uav_msgs/OpticalFlowRad"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# OptFlowSample.msg
# Post-processed optical flow measurement

# Timestamp of measurement (usec since PX4 startup)
uint64 time_usec

uint8 sensor_id

# Integration period in usec
uint32 integration_time_us	

# Integrated flow
float32 integrated_x
float32 integrated_y

# Integrated gyro roll rates for compensation
float32 integrated_xgyro 	# [rad]
float32 integrated_ygyro
float32 integrated_zgyro

# Temperature
int16 temperature 			# *100 = degrees Celsius

# Quality
# scalar measure of flow quality [0,255]
# 255 => best quality
uint8 quality

# Ground distance [m]
uint32 time_delta_distance_us	# us since distance measurement
float32 distance



"""
  __slots__ = ['time_usec','sensor_id','integration_time_us','integrated_x','integrated_y','integrated_xgyro','integrated_ygyro','integrated_zgyro','temperature','quality','time_delta_distance_us','distance']
  _slot_types = ['uint64','uint8','uint32','float32','float32','float32','float32','float32','int16','uint8','uint32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       time_usec,sensor_id,integration_time_us,integrated_x,integrated_y,integrated_xgyro,integrated_ygyro,integrated_zgyro,temperature,quality,time_delta_distance_us,distance

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(OpticalFlowRad, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.time_usec is None:
        self.time_usec = 0
      if self.sensor_id is None:
        self.sensor_id = 0
      if self.integration_time_us is None:
        self.integration_time_us = 0
      if self.integrated_x is None:
        self.integrated_x = 0.
      if self.integrated_y is None:
        self.integrated_y = 0.
      if self.integrated_xgyro is None:
        self.integrated_xgyro = 0.
      if self.integrated_ygyro is None:
        self.integrated_ygyro = 0.
      if self.integrated_zgyro is None:
        self.integrated_zgyro = 0.
      if self.temperature is None:
        self.temperature = 0
      if self.quality is None:
        self.quality = 0
      if self.time_delta_distance_us is None:
        self.time_delta_distance_us = 0
      if self.distance is None:
        self.distance = 0.
    else:
      self.time_usec = 0
      self.sensor_id = 0
      self.integration_time_us = 0
      self.integrated_x = 0.
      self.integrated_y = 0.
      self.integrated_xgyro = 0.
      self.integrated_ygyro = 0.
      self.integrated_zgyro = 0.
      self.temperature = 0
      self.quality = 0
      self.time_delta_distance_us = 0
      self.distance = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_QBI5fhBIf.pack(_x.time_usec, _x.sensor_id, _x.integration_time_us, _x.integrated_x, _x.integrated_y, _x.integrated_xgyro, _x.integrated_ygyro, _x.integrated_zgyro, _x.temperature, _x.quality, _x.time_delta_distance_us, _x.distance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 44
      (_x.time_usec, _x.sensor_id, _x.integration_time_us, _x.integrated_x, _x.integrated_y, _x.integrated_xgyro, _x.integrated_ygyro, _x.integrated_zgyro, _x.temperature, _x.quality, _x.time_delta_distance_us, _x.distance,) = _struct_QBI5fhBIf.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_QBI5fhBIf.pack(_x.time_usec, _x.sensor_id, _x.integration_time_us, _x.integrated_x, _x.integrated_y, _x.integrated_xgyro, _x.integrated_ygyro, _x.integrated_zgyro, _x.temperature, _x.quality, _x.time_delta_distance_us, _x.distance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 44
      (_x.time_usec, _x.sensor_id, _x.integration_time_us, _x.integrated_x, _x.integrated_y, _x.integrated_xgyro, _x.integrated_ygyro, _x.integrated_zgyro, _x.temperature, _x.quality, _x.time_delta_distance_us, _x.distance,) = _struct_QBI5fhBIf.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_QBI5fhBIf = struct.Struct("<QBI5fhBIf")
